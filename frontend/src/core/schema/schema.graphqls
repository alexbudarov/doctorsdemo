# THIS FILE WAS GENERATED AUTOMATICALLY. DO NOT EDIT.
directive @negativeOrZero on INPUT_FIELD_DEFINITION

directive @notBlank on INPUT_FIELD_DEFINITION

directive @futureOrPresent on INPUT_FIELD_DEFINITION

directive @past on INPUT_FIELD_DEFINITION

directive @pastOrPresent on INPUT_FIELD_DEFINITION

directive @positiveOrZero on INPUT_FIELD_DEFINITION

directive @javaType(name: String!) on SCALAR

directive @size(max: Int = 2147483647, min: Int = 0) on INPUT_FIELD_DEFINITION

directive @null on INPUT_FIELD_DEFINITION

directive @notEmpty on INPUT_FIELD_DEFINITION

directive @assertFalse on INPUT_FIELD_DEFINITION

directive @pattern(regexp: String!) on INPUT_FIELD_DEFINITION

directive @negative on INPUT_FIELD_DEFINITION

directive @min(value: Long!) on INPUT_FIELD_DEFINITION

directive @assertTrue on INPUT_FIELD_DEFINITION

directive @email(regexp: String = ".*") on INPUT_FIELD_DEFINITION

directive @max(value: Long!) on INPUT_FIELD_DEFINITION

directive @length(max: Int = 2147483647, min: Int = 0) on INPUT_FIELD_DEFINITION

directive @positive on INPUT_FIELD_DEFINITION

directive @url on INPUT_FIELD_DEFINITION

directive @decimalMax(inclusive: Boolean = true, value: String!) on INPUT_FIELD_DEFINITION

directive @future on INPUT_FIELD_DEFINITION

directive @digits(fraction: Int!, integer: Int!) on INPUT_FIELD_DEFINITION

directive @decimalMin(inclusive: Boolean = true, value: String!) on INPUT_FIELD_DEFINITION

type Appointment {
  doctor: Doctor
  durationMinutes: Int!
  endTime: LocalDateTime
  id: ID
  patient: Patient!
  status: AppointmentStatus
  time: LocalDateTime!
}

type AppointmentRequestResult {
  appointment: Appointment
  reserved: Boolean!
}

type AppointmentResultPage {
  content: [Appointment]
  totalElements: Long!
}

type Doctor {
  firstName: String!
  id: ID
  lastName: String!
  specialty: Specialty
}

type DoctorResultPage {
  content: [Doctor]
  totalElements: Long!
}

# Mutation root
type Mutation {
  cancelAppointment(id: ID!): Void
  deleteDoctor(id: ID!): Void
  deletePatient(id: ID!): Void
  requestAppointment(request: AppointmentRequestInput!): AppointmentRequestResult!
  updateDoctor(input: DoctorInput!): Doctor!
  updatePatient(input: PatientInput!): Patient!
}

type Patient {
  firstName: String!
  id: ID
  lastName: String!
}

type PatientResultPage {
  content: [Patient]
  totalElements: Long!
}

# Query root
type Query {
  appointment(id: ID!): Appointment!
  appointmentList(filter: AppointmentFilterInput, page: OffsetPageInput, sort: [AppointmentOrderByInput]): AppointmentResultPage!
  doctor(id: ID!): Doctor!
  doctorFullList: [Doctor]!
  doctorList(filter: DoctorFilterInput, page: OffsetPageInput, sort: [DoctorOrderByInput]): DoctorResultPage!
  patient(id: ID!): Patient!
  patientFullList: [Patient]!
  patientList(filter: PatientFilterInput, page: OffsetPageInput, sort: [PatientOrderByInput]): PatientResultPage!
  userInfo: UserInfo
  userPermissions: [String]
}

type UserInfo {
  username: String
}

enum AppointmentOrderByProperty {
  DOCTOR_FIRST_NAME
  PATIENT_FIRST_NAME
  TIME
}

enum AppointmentStatus {
  CANCELLED
  FINISHED
  IN_PROGRESS
  MISSED
  PENDING
}

enum DoctorOrderByProperty {
  FIRST_NAME
  LAST_NAME
}

enum PatientOrderByProperty {
  FIRST_NAME
  LAST_NAME
}

enum SortDirection {
  ASC
  DESC
}

enum Specialty {
  ALLERGY_AND_IMMUNOLOGY
  DERMATOLOGY
  GP
  NEUROLOGY
  OPHTHALMOLOGY
  PSYCHIATRY
}

scalar BigDecimal

scalar BigInteger

scalar Date

scalar DateTime

scalar LocalDateTime

scalar LocalTime

scalar Long

scalar Time

scalar Timestamp

scalar Url

scalar Void

input AppointmentFilterInput {
  doctorLastName: String
  patientLastName: String
  timeMax: LocalDateTime
  timeMin: LocalDateTime
}

input AppointmentOrderByInput {
  direction: SortDirection
  property: AppointmentOrderByProperty
}

input AppointmentRequestInput {
  doctorId: ID!
  durationMinutes: Int!
  patientId: ID!
  time: LocalDateTime!
}

input DoctorFilterInput {
  firstName: String
  lastName: String
}

input DoctorInput {
  firstName: String!
  id: ID
  lastName: String!
  specialty: Specialty
}

input DoctorOrderByInput {
  direction: SortDirection
  property: DoctorOrderByProperty
}

input OffsetPageInput {
  number: Int!
  size: Int!
}

input PatientFilterInput {
  firstName: String
  lastName: String
}

input PatientInput {
  firstName: String!
  id: ID
  lastName: String!
}

input PatientOrderByInput {
  direction: SortDirection
  property: PatientOrderByProperty
}

